generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String
  avatar            String?
  bio               String?
  username          String             @unique
  createdAt         DateTime           @default(now())
  acceptedTermsAt   DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isOnline          Boolean            @default(false)
  lastSeen          DateTime           @default(now())
  isVerified        Boolean            @default(false)
  comments          Comment[]
  conversations     ConversationUser[]
  followers         Follow[]           @relation("UserFollowers")
  following         Follow[]           @relation("UserFollowing")
  likes             Like[]
  messagesSent      MessageRead[]
  receivedMessages  Message[]          @relation("MessageReceiver")
  sentMessages      Message[]          @relation("MessageSender")
  posts             Post[]
  stories           Story[]
  verificationCodes VerificationCode[]

  @@map("users")
}

model VerificationCode {
  id        String   @id @default(cuid())
  code      String
  email     String
  userId    String?
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_codes")
}

model Conversation {
  id        String             @id @default(cuid())
  name      String?
  isGroup   Boolean            @default(false)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  users     ConversationUser[]
  messages  Message[]

  @@map("conversations")
}

model ConversationUser {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  isAdmin        Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@map("conversation_users")
}

model Message {
  id             String        @id @default(cuid())
  content        String
  imageUrl       String?
  senderId       String
  receiverId     String?
  conversationId String?
  isRead         Boolean       @default(false)
  readAt         DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  readBy         MessageRead[]
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  receiver       User?         @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender         User          @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_reads")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id        String    @id @default(cuid())
  caption   String?
  mediaUrl  String
  mediaType String
  isActive  Boolean   @default(true)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Story {
  id        String   @id @default(cuid())
  caption   String?
  mediaUrl  String
  mediaType String
  isActive  Boolean  @default(true)
  expiresAt DateTime
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stories")
}
